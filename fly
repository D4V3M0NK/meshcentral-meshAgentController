#!/bin/bash


###################
##### OPTIONS #####
###################
# connectionsFolder pathToFolder
#   can be set to an alternative folder that contains all individual remote server's meshaction files
#   eg. connectionsFolder=/path/to/meshactionFiles
connectionsFolder=

# mfa [ 0 | 1 ]
#   if your MeshCentral user has multi-factor authentication enabled, set to 1
mfa=0



##### DO NOT EDIT ANYTHING BELOW THIS LINE #####
set -e

DIR="$(pwd)"
connectionFile=.connFile.txt
pidfile=.pidfile


# check that meshcmd is present
if [[ ! -f ./meshcmd ]]; then
    echo -e "\nCan't find meshcmd\n\n"
    exit 1;
fi

if [[ -f ${1} ]]; then
    sourceFile=${1}
else
    if [[ -f ${connectionsFolder}/${1} ]]; then
        sourceFile=${connectionsFolder}/${1}
    else
        more ${connectionFile}
        echo -e "\nUnable to find connection file : ${1}\n"
        exit;
    fi
fi

localPort=$(jq '.localPort' ${sourceFile})
remoteName=$(jq '.remoteName' ${sourceFile})
remotePort=$(jq '.remotePort' ${sourceFile})
password=$(jq -r '.password' ${sourceFile})
username=$(jq '.username' ${sourceFile})

if [[ -z ${password} ]]; then
    inFilePassword=0
    # request password from command line
    read -s -p "Please supply password for ${username} : " password
    echo ""
else 
    inFilePassword=1
fi


if [[ ${mfa} -eq 1 ]]; then
    read -p "Please enter MultiFactor Authentication PIN : " token
    echo ""
fi


cmd="./meshcmd"

cmd="$cmd --actionfile ${sourceFile}"

if [[ ${inFilePassword} -eq 0 ]]; then
    cmd="$cmd --password ${password}"
fi
if [[ ${mfa} -eq 1 ]]; then
    cmd="$cmd --token ${token}"
fi

cmd="$cmd &"

echo -e "\n\n------------- DEBUGGING ----------------------"
echo ${cmd}
echo -e "------------- DEBUGGING ----------------------\n\n"


bash -c "${cmd}"

pid=$(ps -ef | grep "${cmd}" | awk '{print $2}')

if ! [[ -f ${connectionFile} ]]; then
    echo "============================================================" > ${connectionFile}
    echo "  PID   :  Local  :  Connection Details " >> ${connectionFile}
    echo "============================================================" >> ${connectionFile}
    echo " ${pid}  :  ${localPort}  :  ${remoteName} (${remotePort})" >> ${connectionFile}
    echo "" >> ${connectionFile}
    echo "" >> ${connectionFile}
    echo -e "\tUse \"land PID#\" to stop a connection" >> ${connectionFile}
    echo -e "\tUse \"land all\" to stop all connections" >> ${connectionFile}
else
    # get the header
    line1=`head -n3 ${connectionFile}`

    #get the rest of the file
    existing=`tail -n +4 ${connectionFile}`

    # echo out the header
    echo "${line1}" > ${connectionFile}
    
    # add this (latest) entry
    echo " ${pid}  :  ${localPort}  :  ${remoteName} (${remotePort})" >> ${connectionFile}

    # append the rest of the entries
    echo "${existing}" >> ${connectionFile}
fi


more ${connectionFile}
echo ""
echo ""